// -*- mode: c++ -*-


/*
 * Copyright (c) 2021 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define QWE_L 0

#define NAV_L 1
#define NUM_L 2
#define SYM_L 3
#define FUN_L 4
#define NUM_W_L 5
#define BLE_L 6
#define SRT_EXW_L 7
#define SRT_EXL_L 8



// JIS

#include "jis.h"


// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <175>; };

&sk {  // sticky-key config
    release-after-ms = <1000>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    release-after-ms = <5000>;  
    quick-release;             // no double capitalization when rolling keys
};

&caps_word {
    continue-list = <UNDERSCORE INT1 MINUS AMPS BACKSPACE>;
};

/ {
  combos {
    compatible = "zmk,combos";
    
    undo_combo {
      timeout-ms = <50>;
      key-positions = <1 31>;
      bindings = <&undo>;
    };
    ret_combo {
      timeout-ms = <50>;
      key-positions = <16 17 18>;
      bindings = <&kp RET>;
    };
    save_combo {
      timeout-ms = <50>;
      key-positions = <11 31>;
      bindings = <&kp LG(S)>;
    }; 
    caps_word_combo {
      timeout-ms = <50>;
      key-positions = <31 32>;
      bindings = <&caps_word>;
    };
    3thumb_left {
      timeout-ms = <50>;
      key-positions = <30 31>;
      bindings = <&mo FUN_L>;
    };

    ble_mo {
      timeout-ms = <50>;
      key-positions = <9 19 29>;
      bindings = <&mo BLE_L>;
    };
    backward_char {
      timeout-ms = <50>;
      key-positions = <22 23>;
      bindings = <&kp LEFT>;
    };
    forward_char {
      timeout-ms = <50>;
      key-positions = <26 27>;
      bindings = <&kp RIGHT>;
    };
    backward_word {
      timeout-ms = <50>;
      key-positions = <21 22>;
      bindings = <&kp LA(LEFT)>;
    };
    forward_word {
      timeout-ms = <50>;
      key-positions = <27 28>;
      bindings = <&kp LA(RIGHT)>;
    };
    backward_sentence {
      timeout-ms = <50>;
      key-positions = <21 23>;
      bindings = <&kp HOME>;
    };
    forward_sentence {
      timeout-ms = <50>;
      key-positions = <26 28>;
      bindings = <&kp END>;
    };
    previous_line {
      timeout-ms = <50>;
      key-positions = <13 22>;
      bindings = <&kp UP>;
    };
    next_line {
      timeout-ms = <50>;
      key-positions = <16 27>;
      bindings = <&kp DOWN>;
    };
    previous_paragraph {
      timeout-ms = <50>;
      key-positions = <11 22>;
      bindings = <&kp LA(UP)>;
    };
    next_paragraph {
      timeout-ms = <50>;
      key-positions = <18 27>;
      bindings = <&kp LA(DOWN)>;
    };
    sorcery_magic2 {
      timeout-ms = <50>;
      key-positions = <3 6>;
      bindings = <&kp LS(NUBS)>;
    };
    tab_combo {
      timeout-ms = <50>;
      key-positions = <11 23>;
      bindings = <&kp TAB>;
    };
    esc_combo {
      timeout-ms = <50>;
      key-positions = <1 3>;
      bindings = <&kp ESC>;
    };

    bksp_word_combo {
      timeout-ms = <50>;
      key-positions = <16 18>;
      bindings = <&kp LA(BKSP)>;
    };
    bksp_combo {
      timeout-ms = <50>;
      key-positions = <16 32>;
      bindings = <&kp BKSP>;
    };
    
    up {
      timeout-ms = <50>;
      key-positions = <12 13>;
      bindings = <&kp UP>;
    };
    up_paragraph {
      timeout-ms = <50>;
      key-positions = <11 12>;
      bindings = <&kp LA(UP)>;
    };
    del_word_combo {
      timeout-ms = <50>;
      key-positions = <11 13>;
      bindings = <&kp LA(DEL)>;
    };
    del_combo {
      timeout-ms = <50>;
      key-positions = <13 31>;
      bindings = <&kp DEL>;
    };
    spc_combo {
      layers = <16 17 18 19>;
      timeout-ms = <30>;
      key-positions = <11 12 13>;
      bindings = <&kp SPACE>;
    };
    
    page_up_combo {
      timeout-ms = <50>;
      key-positions = <23 31>;
      bindings = <&kp PG_UP>;
    };
    page_down_combo {
      timeout-ms = <50>;
      key-positions = <26 32>;
      bindings = <&kp PG_DN>;
    };  
    eisu_combo {
      timeout-ms = <50>;
      key-positions = <1 2 3>;
      bindings = <&_EISU>;
    };
    kana_combo {
      timeout-ms = <50>;
      key-positions = <6 7 8>;
      bindings = <&_KANA>;
    };
    hiragana_combo {
      layers = <16 17 18 19>;
      timeout-ms = <50>;
      key-positions = <2 7>;
      bindings = <&kp LC(J)>;
    };
    katakana_combo {
      layers = <16 17 18 19>;
      timeout-ms = <50>;
      key-positions = <1 8>;
      bindings = <&kp LC(K)>;
    };
    num_word_combo {
      timeout-ms = <50>;
      key-positions = <31 34>;
      bindings = <&to NUM_W_L>;
    };

    down {
      timeout-ms = <50>;
      key-positions = <16 17>;
      bindings = <&kp DOWN>;
    };
    
    down_paragraph {
      timeout-ms = <50>;
      key-positions = <17 18>;
      bindings = <&kp LA(DOWN)>;
    };
    num_sticky_combo {
      timeout-ms = <50>;
      key-positions = <12 17>;
      bindings = <&sl NUM_L>;
    };
    nav_sticky_combo {
      timeout-ms = <50>;
      key-positions = <11 18>;
      bindings = <&sl NAV_L>;
    };
    sym_sticky_combo {
      timeout-ms = <50>;
      key-positions = <10 19>;
      bindings = <&sl SYM_L>;
    };
    selword_combo {
      timeout-ms = <50>;
      key-positions = <13 16>;
      bindings = <&selw_sell>;
    };
    selword_rep_combo {
      layers = <29>;
      timeout-ms = <50>;
      key-positions = <13 16>;
      bindings = <&selword_f_rep>;
    };
    selline_rep_combo {
      layers = <30>;
      timeout-ms = <50>;
      key-positions = <13 16>;
      bindings = <&selline_f_rep>;
    };

    copy_combo {
      timeout-ms = <50>;
      key-positions = <1 2>;
      bindings = <&copy>;
    };
    paste_combo {
      timeout-ms = <50>;
      key-positions = <2 3>;
      bindings = <&paste>;
    };
    select_all_combo {
      timeout-ms = <50>;
      key-positions = <18 32>;
      bindings = <&kp LG(A)>;
    };

    
  };
};

/ {
  macros {
    _EISU: _eisu {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings
        = <&macro_tap &kp LANG2>
        ;
    };
    _KANA: _kana {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings
        = <&macro_tap &kp LANG1>
        ;
    };
    googl: googl {
       compatible = "zmk,behavior-macro";
       #binding-cells = <0>;
       bindings
         = <&macro_tap &kp LG(C)>
         , <&macro_tap &kp LG(SPACE)>
         , <&macro_tap &kp G &kp SPACE> , <&macro_tap &kp LG(V) &kp RET>
         ;
    };
    gtran: gtran {
       compatible = "zmk,behavior-macro";
       #binding-cells = <0>;
       bindings
           = <&macro_tap &kp LG(C)>
           , <&macro_tap &kp LG(SPACE)>
           , <&macro_tap &kp T &kp SPACE> , <&macro_tap &kp LG(V) &kp RET>
           ;
    };
    defin: defin {
       compatible = "zmk,behavior-macro";
       #binding-cells = <0>;
       bindings
           = <&macro_tap &kp LG(C)>
           , <&macro_tap &kp LG(SPACE)>
           , <&macro_tap &kp D &kp SPACE> , <&macro_tap &kp LG(V)>
           , <&macro_wait_time 50>
           , <&kp RET>
           ;
    };
    nw_spc: nw_spc {
       compatible = "zmk,behavior-macro";
       #binding-cells = <0>;
       bindings
           = <&macro_press &kp SPACE>
           , <&macro_tap &to QWE_L>
           , <&macro_pause_for_release>
           , <&macro_release &kp SPACE>
           ;
    };
    nw_ret: nw_ret {
       compatible = "zmk,behavior-macro";
       #binding-cells = <0>;
       bindings
           = <&macro_press &kp RET>
           , <&macro_tap &to QWE_L>
           , <&macro_pause_for_release>
           , <&macro_release &kp RET>
           ;
    };
    selword_f: select_word_forwards {
       compatible = "zmk,behavior-macro";
       #binding-cells = <0>;
       bindings
           = <&macro_tap &kp LA(RIGHT)>
           , <&macro_tap &kp LA(LEFT)>
           , <&macro_tap &kp LA(LS(RIGHT))>
           , <&macro_tap &sl SRT_EXW_L>
           ;
    };
    selword_f_rep: select_word_forwards_repeat {
       compatible = "zmk,behavior-macro";
       #binding-cells = <0>;
       bindings
           = <&macro_tap &kp LA(LS(RIGHT))>
           , <&macro_tap &sl SRT_EXW_L>
           ;
    };
    selline_f: select_line_forwards {
       compatible = "zmk,behavior-macro";
       #binding-cells = <0>;
       bindings
           = <&macro_tap &kp HOME &kp LS(END)>
           , <&macro_tap &sl SRT_EXL_L>
           ;
    };
    selline_f_rep: select_line_forwards_repeat {
       compatible = "zmk,behavior-macro";
       #binding-cells = <0>;
       bindings    
           = <&macro_tap &kp LS(DOWN)>
           , <&macro_tap &kp LS(END)>
           , <&macro_tap &sl SRT_EXL_L>
           ;
     };
    undo: undo {
      compatible = "zmk,behavior-macro";
       #binding-cells = <0>;
      bindings =  <&kp (LG(Z))>;
    };
    copy: copy {
      compatible = "zmk,behavior-macro";
       #binding-cells = <0>;
      bindings =  <&kp (LG(C))>;
    };
    paste: paste {
      compatible = "zmk,behavior-macro";
       #binding-cells = <0>;
      bindings =  <&kp (LG(V))>;
    };
};
};
/ {
  behaviors {
  hm: homerow_mods {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping_term_ms = <240>;
      require-prior-idle-ms = <150>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
    };
  hmr: homerow_mods_right {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping_term_ms = <200>;
      require-prior-idle-ms = <150>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
      hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>; 
    };
  hml: homerow_mods_left {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping_term_ms = <200>;
      require-prior-idle-ms = <150>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
      hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33>; 
    };
  nav_rep: nav_rep {
      compatible = "zmk,behavior-hold-tap";
      tapping_term_ms = <200>;
      #binding-cells = <2>;
      require-prior-idle-ms = <150>;
      flavor = "tap-preferred";
      bindings = <&mo>, <&key_repeat>;
    };
   ck_pp: ck_pp {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp C_PP>, <&kp K_PP>;
      mods = <(MOD_LSFT)>;
    };
   jpkp_minus: jpkp_minus {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp JP_MINUS>, <&kp KP_MINUS>;
      mods = <(MOD_LSFT)>;
    };
   ss_mo: ss_mo {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "hold-preferred";
      tapping-term-ms = <200>;
      bindings = <&mo>, <&sk>;
    };
    selw_sell: selword_selline {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&selword_f>, <&selline_f>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    capsw_capsl: capsword_capslock {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&caps_word>, <&kp CAPS>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    undo_redo: undo_redo {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&undo>, <&kp LS(LC(Z))>;
      mods = <(MOD_LCTL|MOD_RCTL)>;
    };
    paste_without: paste_without {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&paste>, <&kp LS(LC(V))>;
      mods = <(MOD_LALT|MOD_RALT)>;
    };
    copy_cut: copy_cut {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&copy>, <&kp LC(X)>;
      mods = <(MOD_LCTL|MOD_RCTL)>;
    };
  };
};

/ {
  keymap {
    compatible = "zmk,keymap";

    qwerty_layer {
      bindings = <
        &kp Q        &kp W         &kp E          &kp R           &kp T    &kp Y    &kp U         &kp I         &kp O          &kp P
        &hml LSHFT A &hml LALT S   &hml LGUI D    &hml LCTRL F    &kp G    &kp H    &hmr RCTRL J  &hmr RGUI K   &hmr RALT L    &hmr RSHFT JP_SEMI
        &kp Z        &kp X         &kp C          &kp V           &kp B    &kp N    &kp M         &kp JP_COMMA  &kp JP_DOT  &kp JP_SLASH
        &lt NUM_L BKSP   &lt SYM_L SPACE    &key_repeat &ss_mo NAV_L LSHIFT
        >;
    };

    
    nav_layer {
      bindings = <
        &kp LC(Z)  &kp LC(X)  &kp LC(C)   &kp LC(V)   &kp LS(LG(Z))   &kp PSCRN      &sk RCTRL   &sk RGUI      &sk RALT      &sk RSHFT
        &kp LARW   &kp UARW   &kp DARW    &kp RARW    &trans          &trans         &kp RCTRL   &kp RGUI      &kp RALT      &kp RSHFT
        &kp HOME   &kp PG_UP  &kp PG_DN   &kp END     &trans          &trans         &ck_pp      &kp C_VOL_DN  &kp C_VOL_UP  &kp C_MUTE
        &kp ESC     &kp TAB          &trans     &trans
        >;
    };
 
    num_layer {
      bindings = <
        &kp JP_EXL   &kp JP_LBKT  &kp JP_RBKT   &kp JP_COLON  &kp LC(F2)    &kp JP_PLUS   &kp JP_N7  &kp JP_N8  &kp JP_N9  &kp JP_ASTRK
        &kp JP_AMPS  &kp JP_LPAR  &kp JP_RPAR   &kp JP_SEMI   &kp JP_AT     &jpkp_minus  &kp JP_N4  &kp JP_N5  &kp JP_N6  &kp JP_SLASH
        &kp JP_QMARK &kp JP_UNDER &kp JP_DQT    &kp JP_SQT    &kp JP_PIPE   &kp JP_EQUAL  &kp JP_N1  &kp JP_N2  &kp JP_N3  &kp JP_DOT
        &trans     &trans       &kp RET      &kp JP_N0
        >;
    };

    sym_layer {
      bindings = <
        &trans    &trans       &kp LG(C) &kp LG(V)   &trans        &trans         &kp JP_HASH  &kp JP_LT     &kp JP_GT     &kp JP_CARET
        &trans    &kp LA(DEL)  &trans    &kp DEL     &trans        &kp JP_TILDE   &kp JP_PRNT  &kp JP_LBRLS  &kp JP_RBRLS  &kp JP_GRAVE
        &kp CAPS  &defin       &gtran    &googl      &trans        &kp NUBS       &kp JP_YEN   &kp JP_DLLR   &trans        &trans
        &trans   &trans   &trans   &trans
        >;
    };

    fun_layer {
      bindings = <
        &trans          &trans         &trans      &trans     &kp KP_NLCK    &kp PSCRN        &kp F9     &kp F10    &kp F11     &kp F12
        &trans          &trans         &trans      &trans     &kp INS        &kp SLCK         &kp F5     &kp F6     &kp F7      &kp F8
        &trans          &trans         &trans      &trans     &trans         &kp PAUSE_BREAK  &kp F1     &kp F2     &kp F3      &kp F4
        &none      &none             &trans          &trans
        >;
    };
    num_word_layer {
      bindings = <
        &kp JP_EXL   &kp JP_LBKT  &kp JP_RBKT   &kp JP_COLON  &trans        &kp JP_PLUS   &kp JP_N7  &kp JP_N8  &kp JP_N9  &kp JP_ASTRK
        &kp JP_AMPS  &kp JP_LPAR  &kp JP_RPAR   &kp JP_SEMI   &kp JP_AT     &kp JP_MINUS  &kp JP_N4  &kp JP_N5  &kp JP_N6  &kp JP_SLASH
        &kp JP_QMARK &kp JP_UNDER &kp JP_DQT    &kp JP_SQT    &kp JP_PIPE   &kp JP_EQUAL  &kp JP_N1  &kp JP_N2  &kp JP_N3  &kp JP_DOT
        &to QWE_L     &nw_spc       &nw_ret      &kp JP_N0
        >;
    };
    ble_layer {
      bindings = <
        &bt BT_CLR   &trans        &trans       &trans       &trans         &trans      &trans      &trans     &trans     &trans
        &trans       &trans        &trans       &trans       &trans         &trans      &trans      &trans     &trans     &trans
        &bt BT_SEL 4 &bt BT_SEL 3  &bt BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0   &trans      &trans      &trans     &trans     &trans 
        &trans          &trans       &trans           &trans
        >;
    };
    short_ext_word_layer {
      bindings = <
        &trans     &trans     &trans    &trans          &trans          &trans     &trans           &trans    &trans    &trans 
        &trans     &trans     &trans    &selword_f_rep  &trans          &trans     &selword_f_rep   &trans    &trans    &trans 
        &trans     &trans     &trans    &trans          &trans          &trans     &trans           &trans    &trans    &trans 
        &trans     &kp A     &key_repeat    &trans
        >;
    };    
    short_ext_line_layer {
      bindings = <
        &trans     &trans     &trans    &trans          &trans          &trans     &trans           &trans    &trans    &trans 
        &trans     &trans     &trans    &selline_f_rep  &trans          &trans     &selline_f_rep   &trans    &trans    &trans 
        &trans     &trans     &trans    &trans          &trans          &trans     &trans           &trans    &trans    &trans 
        &trans     &kp B     &key_repeat    &trans
        >;
    };    
  };
};

